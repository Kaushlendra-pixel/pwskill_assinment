{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "                                                                           \n",
        "                                                                            \n",
        "                                                                             \n",
        "                                                                          **    Python Basics Questions**"
      ],
      "metadata": {
        "id": "sVLMy9hyZ5_h"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iMccvkPyXt4q"
      },
      "outputs": [],
      "source": [
        "#Question1 What is Python, and why is it popular?\n",
        "\n",
        "#Answer. Python is a programming language that is easy to write, understand, and learn. It has a lot of libraries, making it versatile for various applications. With a large and active community of developers, Python is widely used in the industry, which makes it a popular choice among developers and programmers.\n",
        "\n",
        "#Question2 What is an interpreter in Python?\n",
        "\n",
        "#Answer.An interpreter in Python is a program that executes Python code line by line.\n",
        "\n",
        "#Question3 What are pre-defined keywords in Python?\n",
        "\n",
        "#Answer.Pre-defined Keywords are reserved words in Python that have special meanings and cannot be used as identifiers (function or variable names).\n",
        "\n",
        "#Question4  Can keywords be used as variable names?\n",
        "\n",
        "#Answer. No, you can’t use keywords as variable names in Python. Keywords are special words that have a specific meaning in the language, like if, else, or while. If you try to use one as a variable name, you'll get an error.\n",
        "\n",
        "#Question5 What is mutability in Python?\n",
        "\n",
        "#Answer. Mutability in Python means whether an object can be changed after it's created .\n",
        "\n",
        "#Questions6  Why are lists mutable, but tuples are immutable?\n",
        "\n",
        "#Answer. Lists are mutable because they are designed to be flexible and allow modifications. You can change, add, or remove elements after a list is created, making them useful for dynamic data storage.\n",
        "\n",
        "#Tuples, on the other hand, are immutable because they are designed to be fixed, meaning once created, their content cannot be changed. This makes them more efficient and reliable for data that shouldn't be altered.\n",
        "\n",
        " # in short\n",
        " # Lists: offer flexibility, allowing for frequent updates and modifications.\n",
        "\n",
        "# Tuples: ensure data remains constant, providing reliability and safety from accidental changes.\n",
        "\n",
        "#Question7 What is the difference between “==” and “is” operators in Python?\n",
        "\n",
        "#Answer. ==: This operator checks if the values of two objects are equal. It compares the content of the objects.\n",
        "\n",
        "# is: This operator checks if two objects are the same object in memory. It checks whether both variables point to the same memory location.\n",
        "\n",
        "#Question8 What are logical operators in Python?\n",
        "\n",
        "#Answer. In Python, logical operators are used to perform logical operations, typically with boolean values (True or False).\n",
        "# and: Returns True if both operands are True.\n",
        "# or: Returns True if at least one operand is True.\n",
        "# not: Returns the opposite Boolean value of the operand.\n",
        "\n",
        "#Question9 What is type casting in Python?\n",
        "\n",
        "#Answer. Type casting in Python refers to converting one data type into another.\n",
        "\n",
        "#Question10 What is the difference between implicit and explicit type casting?\n",
        "\n",
        "#Answer. Implicit type casting : Python automatically converts one data type to another without explicit instruction\n",
        "# for example:- result = 5 + 2.5 and result would be 7.5 so in this process . it change integer to a float without explicit instruction.\n",
        "# Explicit type casting : The programmer explicitly converts one data type to another using built-in functions.\n",
        "# for example :- result = int(3.5) Converts float 3.5 to integer 3\n",
        "\n",
        "#Question11 What is the purpose of conditional statements in Python?\n",
        "\n",
        "#Answer.The purpose of conditional statements in Python is to allow the program to make decisions based on certain conditions.\n",
        "\n",
        "#Question12 How does the elif statement work?\n",
        "\n",
        "#Answer.The elif statement in Python stands for \"else if\" and is used to check multiple conditions, one after the other. It works like this.\n",
        "\n",
        "weather = input(\"What's the weather? \")\n",
        "if weather == \"rainy\":\n",
        "    print(\"I will not play cricket\")\n",
        "elif weather == \"sunny\":\n",
        "    print(\"I will play cricket\")\n",
        "else:\n",
        "    print(\"I don't know what to do in this weather\")\n",
        "#if: Python first checks the condition in the if statement.\n",
        "\n",
        "# If True, it runs the code under if and skips everything else.\n",
        "\n",
        "# elif: If the if condition is False, Python moves to the elif condition.\n",
        "\n",
        "# If the elif condition is True, it runs that block of code and skips the rest.\n",
        "\n",
        "# else: If none of the if or elif conditions are True, Python runs the else block\n",
        "\n",
        "#Question13 What is the difference between for and while loops?\n",
        "\n",
        "#Answer. “for” loops are used for iterating over a sequence of elements, while “while” loops are used for executing code until a specified condition becomes False.\n",
        " # For loop: Best for a fixed number of iterations or sequences.\n",
        " # While loop: Best when the iteration depends on a condition.\n",
        "\n",
        "#Question14 Describe a scenario where a while loop is more suitable than a for loop?\n",
        "\n",
        "#Answer. Imagine you are writing a program that continuously asks the user to enter a valid password until they provide a correct one. Since the number of attempts is not predetermined, a while loop is the better choice.\n",
        "# In this case, a for loop wouldn't be practical because it expects a predefined number of iterations.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "                                                                      \n",
        "                                                                       \n",
        "                                                                        \n",
        "                                                                         \n",
        "                                                                          \n",
        "                                                                           \n",
        "                                                                            \n",
        "                                                                             \n",
        "                                                                              \n",
        "                                                                                  **Practical Questions**"
      ],
      "metadata": {
        "id": "5b2q5ov4RNzg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##Question1 Write a Python program to print \"Hello, World!?\n",
        "\n",
        "print(\"Hello, World!\") #answer no.1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3V_8lfpYRo9S",
        "outputId": "da34e096-a909-4b95-cab8-1395159f1001"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question2 Write a Python program that displays your name and age?\n",
        "\n",
        "name = input(\"Enter your name: \")\n",
        "age = input(\"Enter your age: \")\n",
        "print(f\"Your name is {name} and you are {age} years old.\")    #answer no.2"
      ],
      "metadata": {
        "id": "ZIKIQL6ZR56M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4386e949-f328-4499-b866-c8498581a0a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: kaushlendra\n",
            "Enter your age: 21\n",
            "Your name is kaushlendra and you are 21 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question3 Write code to print all the pre-defined keywords in Python using the keyword library\n",
        "\n",
        "help(\"keywords\") #answer no.3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1iisXzrHUDvt",
        "outputId": "6ca6f24d-f280-4e3d-c2fc-b21cfd771569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Here is a list of the Python keywords.  Enter any keyword to get more help.\n",
            "\n",
            "False               class               from                or\n",
            "None                continue            global              pass\n",
            "True                def                 if                  raise\n",
            "and                 del                 import              return\n",
            "as                  elif                in                  try\n",
            "assert              else                is                  while\n",
            "async               except              lambda              with\n",
            "await               finally             nonlocal            yield\n",
            "break               for                 not                 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question4 Write a program that checks if a given word is a Python keyword?\n",
        "\n",
        "import keyword                                        #answer no.4\n",
        "\n",
        "word = input(\"Enter a word: \")\n",
        "\n",
        "if word in keyword.kwlist:\n",
        "    print(f'\"{word}\" is a Python keyword.')\n",
        "else:\n",
        "    print(f'\"{word}\" is not a Python keyword.')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XHtnM2k7UW4v",
        "outputId": "6d075422-a024-4f83-ada2-5b0e85dd0bb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a word: True\n",
            "\"True\" is a Python keyword.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question5 Create a list and tuple in Python, and demonstrate how attempting to change an element works differently for each?\n",
        "\n",
        "my_list = [1,2,3]\n",
        "my_tuple = (1,2,3)\n",
        "\n",
        "# Changing an element in the list                                  #answer no.5\n",
        "my_list[0] = 10\n",
        "my_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W5_jc-85VEzk",
        "outputId": "27e45ada-a16a-4fc9-d23b-bb99b9748f18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 2, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Trying to change an element in the tuple\n",
        "my_tuple[0] = 10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        },
        "id": "NhbRGJH3V8Qz",
        "outputId": "909f4799-a69e-4331-ed05-3fc4edf95455"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'tuple' object does not support item assignment",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-787ee4f1457a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Trying to change an element in the tuple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmy_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question6 Write a function to demonstrate the behavior of mutable and immutable arguments?\n",
        "\n",
        "my_list = [1,2,3]\n",
        "my_tuple = (1,2,3)\n",
        "\n",
        "# Changing an element in the list                                  #answer no.6\n",
        "my_list[0] = 10\n",
        "my_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27e45ada-a16a-4fc9-d23b-bb99b9748f18",
        "id": "97J-ToPUWjQg"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 2, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Trying to change an element in the tuple\n",
        "my_tuple[0] = 10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        },
        "outputId": "909f4799-a69e-4331-ed05-3fc4edf95455",
        "id": "aII4Lgk4Wppx"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'tuple' object does not support item assignment",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-787ee4f1457a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Trying to change an element in the tuple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmy_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mutable argument (my_list): You can modify it inside the function. The change is reflected outside the function as well.\n",
        "# Immutable argument (my_tuple): Attempting to modify it inside the function raises an error, and the value remains unchanged outside the function."
      ],
      "metadata": {
        "id": "myqDDQTIW0Ni"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Question7  Questions 6 and 7 are repeated. The answer provided above addresses both questions."
      ],
      "metadata": {
        "id": "v6vy52OsW-8y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Question8  Write a program to demonstrate the use of logical operators.\n",
        "\n",
        "a = 10\n",
        "b = 5\n",
        "\n",
        "# Using 'and' operator\n",
        "if a > 5 and b < 10:\n",
        "    print(\"Both conditions are true\")\n",
        "\n",
        "# Using 'or' operator\n",
        "if a > 5 or b > 10:\n",
        "    print(\"At least one condition is true\")\n",
        "\n",
        "# Using 'not' operator\n",
        "if not a < 5:\n",
        "    print(\"a is not less than 5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yrty9KfaXwXo",
        "outputId": "68919efd-3309-4573-8125-4f2344a20117"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Both conditions are true\n",
            "At least one condition is true\n",
            "a is not less than 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question9 Write a Python program to convert user input from string to integer, float, and boolean types.\n",
        "\n",
        "user_input= input(\"Enter string value: \")\n",
        "\n",
        "# Check if the input is a valid integer\n",
        "if user_input.isdigit():\n",
        "    x=int(user_input)\n",
        "    print(x)\n",
        "else:\n",
        "    print(\"Cannot convert to an integer\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VmnZ059gYgmV",
        "outputId": "aaf8d2c9-5e35-4aff-98d3-df465228bd13"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter string value: 1\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "user_input = input(\"Enter string value: \")\n",
        "\n",
        "# Try to convert the input to a float\n",
        "try:\n",
        "    x = float(user_input)\n",
        "    print(f\"Converted to float: {x}\")\n",
        "except ValueError:\n",
        "    print(\"Cannot convert to a float\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hP2gVXS1PRAk",
        "outputId": "63478266-9a0b-48ca-bcfd-2c7bfdc0d99d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter string value: 2\n",
            "Converted to float: 2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = input(\"Enter a value: \")\n",
        "\n",
        "# Check if input is \"false\" or \"0\"\n",
        "if x.lower() in ['false', '0', 'no', 'off']:\n",
        "    print(\"False\")\n",
        "    y = False\n",
        "else:\n",
        "    y = bool(x)\n",
        "\n",
        "print(y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kKZSNwiOTSbR",
        "outputId": "30d2ab70-8e68-4165-b319-325cf28acb4f"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a value: ramu\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question10 Write code to demonstrate type casting with list elements?\n",
        "\n",
        "# Original list of elements as strings\n",
        "str_list = [\"1\", \"2\", \"3\", \"4.5\", \"6.7\"]\n",
        "\n",
        "# Convert to integers (convert float first and then to int)\n",
        "int_list = [int(float(x)) for x in str_list]\n",
        "\n",
        "# Convert to floats\n",
        "float_list = [float(x) for x in str_list]\n",
        "\n",
        "# Convert to booleans (non-empty strings will be True)\n",
        "bool_list = [bool(x) for x in str_list]\n",
        "\n",
        "# Output the lists\n",
        "print(f\"List of integers: {int_list}\")\n",
        "print(f\"List of floats: {float_list}\")\n",
        "print(f\"List of booleans: {bool_list}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "b8-RsJELawDf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "126a5a22-3acb-4b90-c0a4-1592154f583e"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List of integers: [1, 2, 3, 4, 6]\n",
            "List of floats: [1.0, 2.0, 3.0, 4.5, 6.7]\n",
            "List of booleans: [True, True, True, True, True]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question11 Write a program that checks if a number is positive, negative, or zero.\n",
        "\n",
        "number = float(input(\"Enter a number: \"))\n",
        "\n",
        "# Check if the number is positive, negative, or zero\n",
        "if number > 0:\n",
        "    print(\"The number is positive.\")\n",
        "elif number < 0:\n",
        "    print(\"The number is negative.\")\n",
        "else:\n",
        "    print(\"The number is zero.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7O88PEobdt0",
        "outputId": "cd25094f-2552-4044-a70a-c9a531a323d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 1\n",
            "The number is positive.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question12 Write a for loop to print numbers from 1 to 10.\n",
        "\n",
        "# Using a for loop to print numbers from 1 to 10\n",
        "for number in range(1, 11):\n",
        "    print(number)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W02_EbcGcDVY",
        "outputId": "bc41fd25-9074-456d-9601-6885e3280547"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question13 Write a Python program to find the sum of all even numbers between 1 and 50.\n",
        "\n",
        "sum_of_evens = 0\n",
        "\n",
        "# Loop through numbers from 1 to 50\n",
        "for number in range(1, 51):\n",
        "    if number % 2 == 0:  # Check if the number is even\n",
        "        sum_of_evens += number\n",
        "\n",
        "print(f\"The sum of all even numbers between 1 and 50 is {sum_of_evens}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tOVvvmy9cXPK",
        "outputId": "3e32205a-7486-4b20-bad7-9f04f9680ea4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum of all even numbers between 1 and 50 is 650\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question14 Write a program to reverse a string using a while loop.\n",
        "\n",
        "# Get user input\n",
        "user_input = input(\"Enter a string: \")\n",
        "\n",
        "# Initialize an empty string for the reversed version\n",
        "reversed_string = \"\"\n",
        "\n",
        "# Reverse the string using a while loop\n",
        "while user_input:\n",
        "    reversed_string += user_input[-1]\n",
        "    user_input = user_input[:-1]\n",
        "\n",
        "print(f\"Reversed string: {reversed_string}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "GJzgmLk_c0hW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d2353f1-f905-42d1-9fee-091446abf2c2"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string: kaushlendra\n",
            "Reversed string: ardnelhsuak\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question15 Write a Python program to calculate the factorial of a number provided by the user using a while loop.\n",
        "\n",
        "# Get user input\n",
        "num = int(input(\"Enter a number to calculate its factorial: \"))\n",
        "\n",
        "# Initialize the factorial variable\n",
        "factorial = 1\n",
        "\n",
        "# Calculate factorial using a while loop\n",
        "while num > 1:\n",
        "    factorial *= num\n",
        "    num -= 1\n",
        "print(f\"The factorial is: {factorial}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W1riGkZlJHvN",
        "outputId": "001533ee-afdd-4cdf-e51e-ff35d02768ac"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number to calculate its factorial: 3\n",
            "The factorial is: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uwne8uZIaH9T"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
